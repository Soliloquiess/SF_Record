package it.parenthesis;

/**
 * 4 종류의 괄호문자들 '()', '[]', '{}', '<>' 로 이루어진 문자열이 주어진다.
이 문자열에 사용된 괄호들의 짝이 모두 맞는지 판별하는 프로그램을 작성한다.
예를 들어 아래와 같은 문자열은 유효하다고 판단할 수 있다.
아래와 같은 문자열은 유효하지 않은 문자열이다. 붉은색으로 표시된 괄호의 짝을 찾을 수 없기 때문이다.
아래 문자열은 열고 닫는 괄호의 개수는 유효하나 짝이 맞지 않는 괄호가 사용 되었기 때문에 유효하지 않다.

[입력]
각 테스트 케이스의 첫 번째 줄에는 테스트케이스의 길이가 주어지며, 바로 다음 줄에 테스트 케이스가 주어진다.
총 10개의 테스트케이스가 주어진다.

[출력]
#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 유효성 여부를 1 또는 0으로 표시한다 (1 - 유효함, 0 - 유효하지 않음).

[결과]
#1 1
#2 0
#3 1
#4 1
#5 1
#6 0
#7 0
#8 1
#9 0
#10 1

=============================
1. data input
2. 괄호 저장할 Stack 생성
3. 입력된 문자열의 길이만큼 처리
	3-1. 한글자 꺼내서
	-> 여는 괄호이면 일단 저장
	-> 닫는 괄호이면   짝꿍체크
	(스택이 비어 있는지, 스택의 글자와 짝꿍)
4. 스택에 값이 남아 있다면 err

동일 기능 메소드 설명
:version up에 따른 메소드 이름 통일, or 상속
 */



import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.Stack;


public class SW1218_ParenthesisStack {
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//br = new BufferedReader(new StringReader(src));
		
		int Answer;
		for(int tc = 1; tc <= 10; tc++)	{	
			
			Answer = 1;
			int N = Integer.parseInt(br.readLine().trim());//tc 길이
			
			String line = br.readLine();//한줄
			int length = line.length();//문자열 길이
			
			Stack<Character> stack = new Stack<Character>();
			
			if(length % 2 == 1) {//문자열 길이가 홀수 -->짝이 안맞음
				Answer = 0;
				
			}else {//짝수개
				for (int i = 0 ; i < length; i++) {//문자열 길이 만큼 조사
					char ch = line.charAt(i);//한글자 꺼내고
					
					if(ch=='{' || ch=='(' || ch=='[' || ch=='<') {//여는 괄호들
						stack.push(ch);
						
					}else {//닫는 괄호들
						char pair = getPair(ch);						
						if(stack.pop() != pair) {//스택이 비어 있거나 스택에서 꺼낸 값과 짝이 안맞으면
						//	if(stack.isEmpty() || stack.pop() != pair) {
							Answer = 0;
							break;
						}
					}
				}//for
				
				//문자열 길이는 짝수지만 스택에서 다 꺼낸 후에도 데이터가 남아 있으면
				if(!stack.isEmpty()) {
					Answer=0;
				}
			}//else
			
			System.out.print("#"+tc+" "+Answer);
			System.out.println();
		}
	}
	
	//ch와 짝이 되는 대응되는 괄호를 리턴해 줌
	public static char getPair(char ch) {
		switch (ch) {
			case '}':	return '{';
			case ')':	return '(';
			case ']':	return '[';
			case '>':	return '<';
		}
		return ' ';
	}
	
	static String result= "#1 1\r\n" + 
			"#2 0\r\n" + 
			"#3 1\r\n" + 
			"#4 1\r\n" + 
			"#5 1\r\n" + 
			"#6 0\r\n" + 
			"#7 0\r\n" + 
			"#8 1\r\n" + 
			"#9 0\r\n" + 
			"#10 1\r\n" + 
			"";
	 
	static String src = "182\r\n" +
			"(({<(({{[[[[<<[[(<[[{([{{{[<[[[{<<(<[[{}[]{}{}[]]]><><>{})[]{}><>[]<>><>}][]]<>{}]>]()}()()(){}}}{}][])(){}<>()}]{}[]]>()[][][]){}]]{}[]<>><>{}[]{}<>>]]]][]{}{}[]()}}))>}<>{}()))[][]\r\n" +
			"298\r\n" +
			"{({{[({([{(<[([(([<({[{{[[({{[({([<{(<[[(<((<[{[<[([((<{{[([{<<[{(<({[<{}()>[]<>][]})>[])<>()[]}]>><>(){}()[]}]{}()<>[]<>)<>{}<>{}{}]}()}<>>)[]){}])]>[][]{}]()}][]()>[]))[]>)]][]>)[]{}}[]<><>>]()[])}{}){}]}}<><>){}][]{}{}]<>[]}(){}<>}][]})[]()><>]))])]>{}{}())}{}])<>}{})]{}{}}[])())<>{}[]<><>}[]{}\r\n" +
			"230\r\n" +
			"[({([<[<[<<(([{([<((({<{([{[<[<<<([<[<([[{([<[{({([<(<[[][]]<>{}<>[]>){}{}<>>]{}())})}[]]{}>[][][]]()[][]<><>()<>){}}]])[][][]>]>()](){}[])>>><><>{}]>]{}[]}<>][]())}[][]>}<>)()))>{}[]()])[][]}]<>()<>))>>()][]>][][]>]())}<><>{}<>)]\r\n" +
			"226\r\n" +
			"[[[{{[[<[([((([({{[{<<([[[([[{<[{{<{[<[([<<<((([{(<({<([(<><>){}])()[]>}<>())>){}}]))){}>()<><>>>[]]<>)]>]{}()}(){}>()<><>}}]()>}<>{}]])<>{}]()(){}][]()])[]{}(){}<>>[]>}{}{}](){}}})()])(){}<>))][])[]()<>]<><>>]()][]{}}}[]]]]()\r\n" +
			"242\r\n" +
			"((([<[{{<[<{<{({(({({({<{{{((([{[({[{<{{(([[{([{<<({<[]>}){}[]()()>>}[][]()][]<>){}<>}]]))}[]}()><>[]}(){}]()[][][]})]<>}{}<>](){}){}){})<><><>{}<>[]}}<>{}{}}{}[]>{}}(){}){}<>})}))[]})()}>[]{}{}()}>]>{}[][][][]}}][][][]{}<>>][])()[]))()()[]{}\r\n" +
			"138\r\n" +
			"{[<(({[{(({[(({{{]{<[([[({[[[[<>]]]{}]{}})]]()<>{}{}<>()<>)()<>{}[]<>]>{}})<>()<><><>}{}}}())){}]}))}()<>()[]{}]})<><><><>)>[][][]]}<>[]{}\r\n" +
			"238\r\n" +
			"{<[[({[([{{(({{((<({(<{{([<{<([((<<(<{[<<([{{[<[{<{{{[<[{<{[[]]}()[][]}()}]>]}{}{}}<>[]<>{}(){}}>}]{}{}><>[]]}[]{}()[]{}}]{}())()<><>()>>]()<>}>{}[])<>()>>()))()])>{}}>])}{}{}}>)()<>[]}){}>)<>)()}}())){}<>()}[][]}]){}<>[]<>]}[])]()]()>}<>\r\n" +
			"272\r\n" +
			"([{[<[[([([{[[([[({([(<[[[<{(({<([{([{<{[<<((({(<{<[({<{<<([[{<[[{{[<(([{}])<>)[]>]()<>}<>}[]]]{}()>}][]]{})<>{}[]>>}>{}<>}{})()]<>><>}[][]>)<>{}}[]<>))){}[]>>[]]}[]>}][])[]}]())>[]{}{}}[]{}))}>(){}[]{}]<>{}]]()>)<><><><>[]])}{})[]()]])]]}])<>][]{}<>)()]<><>()]>]<>}<>()])\r\n" +
			"218\r\n" +
			"[{({[<{[<{[[[<[{[[[[{([{[<[[<<[{{((<[([[<[(<[({}[]<>[]()[]()(){}){})<>()>[][]<>[])<><>[](){}[]{}<>]><>]])]>[]){}<>)[][]}}<><>()<>]<>><>{}>[]<>]{}]>]<>}]{}())[]}[]]<>]]]}]()>]<>(){}]()<>()]()}>{}<>]{}}>]()[]()[]})()}]()\r\n" +
			"258\r\n" +
			"({{[({<{<<{{([[<{({{{[[({[<(<{<<{<<{{{{([{[{<{{[<<[[[<[{<(<[({(<>)})]><>[])()>{}}[]]{}<>><>]]]<>>{}>]}{}[]}>}]<>[]}]){}<>{}}[]}}}{}<>>>}>[]><><>()<>[]}><>)><><><>]}){}]]<>[]<>}[]<>{}}}()<>)}<>{}[]>][]{}])<>[][]{}}()}>[]<>>}<><>>()}{}<><>[]()())<>]}{}{}[]}[])\r\n" +
			"";
}


//BY DG


