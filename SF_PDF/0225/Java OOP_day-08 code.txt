
// 실습 #01

package com.ssafy;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class NetworkHttpServer {
	
	public static void main(String[] args) throws IOException {

		try (ServerSocket ss = new ServerSocket(8080)) {
			System.out.println("[WebServer is ready]");
			
			while (true) {
				try ( Socket socket = ss.accept() ) {

					BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"));
					
					String html = "<html><body><h1>Hello SSAFY!! 와우!</h1></body></html>";
					bw.write("HTTP/1.1 200 OK \r\n"); //404 Not Found?
					bw.write("Content-Type: text/html;charset=utf-8\r\n");
					bw.write("\r\n");
					bw.write(html);
					bw.write("\r\n");
	                bw.flush();

				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


// 실습 #02

package lab.ssafy.corona.app;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import lab.ssafy.corona.medical.Hospital;

public class NetworkHttpServerHospital {

	public static void main(String[] args) {
		Hospital univHospital = new Hospital("대학병원", 15, "001", 50, 10);
		Hospital localHospital = new Hospital("동네병원", 3, "901", 10, 2);
		
		// 병원 Collection
		List<Hospital> hospitalList = new ArrayList<Hospital>();
		hospitalList.add(univHospital);
		hospitalList.add(localHospital);
				
		StringBuilder sb = new StringBuilder();
		sb.append("<html><head><style>table,th,td{ border: 1px solid green;}</style></head>");
		sb.append("<body><h2>병원 정보</h2><table>");
		sb.append("<tr><th>병원이름</th><th>직원 수</th><th>전체 병실 수</th><th>빈 병실 수</th></tr>");
		
		for( Hospital h : hospitalList ) {
			sb.append("<tr>")
			.append("<td>").append(h.getName()).append("</td>")
			.append("<td>").append(h.getEmployeeCount()).append("</td>")
			.append("<td>").append(h.getRoomTotalCount()).append("</td>")
			.append("<td>").append(h.getRoomEmptyCount()).append("</td>")
			.append("</tr>");
		}
		sb.append("</table></body></html>");
		String html = sb.toString();
		
		System.out.println(html);
		System.out.println(html.length());
		
		try (ServerSocket ss = new ServerSocket(8080)) {
			System.out.println("[Hospital Info Server is ready]");
			
			while (true) {
				try ( Socket socket = ss.accept() ) {

					BufferedWriter bw = new BufferedWriter(
							new OutputStreamWriter(socket.getOutputStream(), "UTF-8"));

					bw.write("HTTP/1.1 200 OK \r\n");
					bw.write("Content-Type: text/html;charset=utf-8\r\n");
					bw.write("\r\n");
					bw.write(html);
					bw.write("\r\n");
	                bw.flush();

				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}


// 실습 #03

	package lab.ssafy.corona.app;
	
	import java.awt.BorderLayout;
	import java.awt.event.ActionEvent;
	import java.awt.event.ActionListener;
	
	import javax.swing.Box;
	import javax.swing.JButton;
	import javax.swing.JFrame;
	import javax.swing.JScrollPane;
	import javax.swing.JTextArea;
	import javax.swing.JTextField;
	
	public class SimpleSwingTest {
		public static void main(String[] args) {
			SwingUI ui = new SwingUI();
			ui.setTitle("Simple Swing");
			ui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			ui.pack();
			ui.setLocationRelativeTo(null);
			ui.setResizable(false);
			ui.setVisible(true);
		}
	}
	
	class SwingUI extends JFrame{
		
		private static final long serialVersionUID = 1L;
		
		private JTextArea textArea;
	    private JTextField inputTextField;
	    private JButton sendButton;
	    
	    public SwingUI() {
	    	createUI();
	    }
	    
	    private void createUI() {
	        textArea = new JTextArea(20, 50);
	        textArea.setEditable(false);
	        textArea.setLineWrap(true);
	        add(new JScrollPane(textArea), BorderLayout.CENTER); 
	
	        Box box = Box.createHorizontalBox();
	        add(box, BorderLayout.SOUTH);
	        inputTextField = new JTextField();
	        sendButton = new JButton("Send");
	        box.add(inputTextField);
	        box.add(sendButton);
	
			ActionListener sendListener = new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					// 사용자 입력 값 
					String str = inputTextField.getText();
					if ( str != null && str.trim().length() > 0 ) {
						textArea.append(str);
				        textArea.append("\n");
					}
					inputTextField.selectAll();
					inputTextField.requestFocus();
					inputTextField.setText("");
				}
			};
	        
	        inputTextField.addActionListener(sendListener);
	        sendButton.addActionListener(sendListener);
	    }
	}


// 실습 #04

package lab.ssafy.corona.chat;

import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer{

	private ArrayList<ChatThread> chatThreadList = new ArrayList<ChatThread>();
	private int port = 4101;

	public void service() {
		
		try (ServerSocket ss = new ServerSocket(port);) {

			System.out.println("ChatServer 가 준비되었습니다. 접속 포트는 " + port + " 입니다.");

			while (true) {

				Socket s = ss.accept();
				System.out.println("ChatClient 가 접속했습니다.");

				ChatThread t = new ChatThread(s);
				synchronized (chatThreadList) {
					chatThreadList.add(t);
				}
				t.start();
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void broadcast( String message ) {
		synchronized (chatThreadList) {
			for( ChatThread t : chatThreadList ){
				try {
					t.sendMessage( message );
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void main(String[] args) 	{
		new ChatServer().service();
	}

	class ChatThread extends Thread {

		private ObjectInputStream ois;
		private ObjectOutputStream oos;
		private boolean isExit;
		
		public ChatThread(Socket socket) throws Exception {
			this.ois = new ObjectInputStream(socket.getInputStream());
			this.oos = new ObjectOutputStream(socket.getOutputStream());
		}

		public void run() {
			try {
				while ( ! isExit ) {
					String msg = (String) ois.readObject();
					
					if( "^".contentEquals(msg) ) {
						synchronized (chatThreadList) {
							chatThreadList.remove(this);
						}
						isExit = true;
					}else {
						broadcast(msg);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				synchronized (chatThreadList) {
					chatThreadList.remove(this);
				}
			}
		}

		public void sendMessage(String message) throws Exception {
			oos.writeObject(message);
		}
	}
}


package lab.ssafy.corona.chat;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class ChatClient{
	
	public static void main(String[] args) 	{
		String ip = "localhost";
		int port = 4101;
		
		
		ChatClientSwing ui = new ChatClientSwing( ip, port );
		ui.setTitle("SSAFY V1 - connected to " + ip + ":" + port);
		ui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ui.pack();
		ui.setLocationRelativeTo(null);
		ui.setResizable(false);
		ui.setVisible(true);
        
        String name = JOptionPane.showInputDialog("이름을 입력하세요.");
        ui.getChatConnect().setName(name);
	}
}


package lab.ssafy.corona.chat;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ChatClientSwing extends JFrame {

	private static final long serialVersionUID = 1L;
	
	private JTextArea textArea;
    private JTextField inputTextField;
    private JButton sendButton;

    private ChatConnect chatConnect;
    private String name;

    public ChatClientSwing(String ip, int port) {
    	chatConnect = new ChatConnect( this, ip, port, name);
    	createUI();
    }
    
    public ChatConnect getChatConnect() {
    	return chatConnect;
    }
    

    private void createUI() {
        textArea = new JTextArea(20, 50);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        add(new JScrollPane(textArea), BorderLayout.CENTER);

        Box box = Box.createHorizontalBox();
        add(box, BorderLayout.SOUTH);
        inputTextField = new JTextField();
        sendButton = new JButton("Send");
        box.add(inputTextField);
        box.add(sendButton);

		ActionListener sendListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				// 사용자 입력 값 
				String str = inputTextField.getText();
				if ( str != null && str.trim().length() > 0 ) {

					chatConnect.send(str);
					
				}
				inputTextField.selectAll();
				inputTextField.requestFocus();
				inputTextField.setText("");
			}
		};
        
        inputTextField.addActionListener(sendListener);
        sendButton.addActionListener(sendListener);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {

            	chatConnect.sendExit();
            	
            }
        });
    }

    public void updateChat(String message) {
    	textArea.append(message);
        textArea.append("\n");
    }
}

package lab.ssafy.corona.chat;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class ChatConnect {
	private String ip;
	private int port;
	private String name;
	private Socket s;

	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	private ChatClientSwing ui;
	
	public ChatConnect(ChatClientSwing ui, String ip, int port, String name){
		this.ui = ui;
		this.ip = ip;
		this.port = port;
		this.name = name;
		connect();
	}

	public void setName(String name) {
    	this.name = name;
    }
	
	public void connect( ){
		
		try {
             s = new Socket(ip, port);

			 oos = new ObjectOutputStream( s.getOutputStream() );
			 ois = new ObjectInputStream( s.getInputStream() );

			 new Thread(){
				 public void run(){
					 try{
						while( true ) {
							String message = (String) ois.readObject();
							ui.updateChat(message);
						}
					 }catch(Exception e ) {
						 e.printStackTrace();
					 }
				 }				 
			 }.start();
			 
		}catch(Exception e ){
			e.printStackTrace();
		}
	}
	
	public void send(String msg){
		try {
			// [사용자 이름] 메세지 형태로
			oos.writeObject("[" + name + "] " + msg);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public void sendExit(){
		try {
			oos.writeObject("^");
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
}

// 실습 #05
// virus-report.xml
<?xml version="1.0" encoding="UTF-8"?>
<virus-report>
	<author>SSAFY</author>
	<about>COVID-19</about>
	<date>
		<year>2020</year>
		<month>03</month>
		<day>26</day>
	</date>
</virus-report>


// 실습 #06

<?xml version="1.0" encoding="UTF-8"?>
<!ELEMENT virus-report (author, about,date)>
<!ELEMENT date (year,month,day)>
<!ELEMENT author (#PCDATA)>
<!ELEMENT about (#PCDATA)>
<!ELEMENT year (#PCDATA)>
<!ELEMENT month (#PCDATA)>
<!ELEMENT day (#PCDATA)>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE virus-report SYSTEM "virus-report.dtd">
<virus-report>
	<author>SSAFY</author>
	<about>COVID-19</about>
	<date>
		<year>2020</year>
		<month>03</month>
		<day>26</day>
	</date>
</virus-report>


// 실습 #07

package lab.ssafy.corona.xml;

public class VirusReport {
	
	private String author;
	private String about;
	private String date;
	
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getAbout() {
		return about;
	}
	public void setAbout(String about) {
		this.about = about;
	}
	public String getDate() {
		return date;
	}
	public void setDate(String date) {
		this.date = date;
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("VirusReport [author=");
		builder.append(author);
		builder.append(", about=");
		builder.append(about);
		builder.append(", date=");
		builder.append(date);
		builder.append("]");
		return builder.toString();
	}
}


package lab.ssafy.corona.app;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import lab.ssafy.corona.xml.VirusReport;


public class VirusReportDomTest {

	public static void main(String[] args) {

		File file = new File("./src/lab/ssafy/corona/xml/virus-report.xml");
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		
		VirusReport vr = new VirusReport();
		String date = "";
		
		try {
			
			builder = factory.newDocumentBuilder();
			Document doc = builder.parse(file);
			doc.getDocumentElement().normalize();

			Element root = doc.getDocumentElement();
			System.out.println("Root element : " + root.getNodeName());

			NodeList childNodes = root.getChildNodes();

			for(int i = 0; i < childNodes.getLength(); i++){
				Node node = childNodes.item(i);
				if(node.getNodeType() == Node.ELEMENT_NODE){
					
					Element element = (Element) node;
					String textContent = element.getTextContent();
					String nodeName = element.getNodeName();
					switch( nodeName ) {
						case "author" 	: 
							System.out.println("author : " + textContent); 
							vr.setAuthor(textContent); 
							break;
						case "about" 	: 
							System.out.println("about : " + textContent); 
							vr.setAbout(textContent); 
							break;
						case "date" 	: 
							NodeList dateChildNodes = element.getChildNodes();
							for(int j = 0; j < dateChildNodes.getLength(); j++){
								Node childNode = dateChildNodes.item(j);
								if(childNode.getNodeType() == Node.ELEMENT_NODE){
									Element childElement = (Element) childNode;
									String childTextContent = childElement.getTextContent();
									String childNodeName = childElement.getNodeName();
									switch( childNodeName ) {
										case "year" 	: 
											System.out.println("date-year : " + childTextContent); 
											date = childTextContent; 
											break;
										case "month" 	: 
											System.out.println("date-month : " + childTextContent); 
											date += childTextContent; 
											break;
										case "day" 		: 
											System.out.println("date-day : " + childTextContent); 
											date += childTextContent;
											break;
									}
								}
							}
							
							vr.setDate(date);
							break;
					}
				}
			}

		} catch (SAXException | ParserConfigurationException | IOException e1) {
			e1.printStackTrace();
		}
		
		System.out.println(vr);
	}
}

// 실습 #08

package lab.ssafy.corona.xml;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;


public class VirusReportSaxHandler extends DefaultHandler {

	private VirusReport vr = new VirusReport();
	private StringBuilder data = null;
	private StringBuilder dateStr = new StringBuilder();

	boolean bAuthor = false;
	boolean bAbout = false;
	boolean bDate = false;
	boolean bYear = false;
	boolean bMonth = false;
	boolean bDay = false;

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attr) 
		throws SAXException {

		if (qName.equals("author")) {
			bAuthor = true;
		} else if (qName.equals("about")) {
			bAbout = true;
		} else if (qName.equals("date")) {
			bDate = true;
		} else if (qName.equals("year")) {
			bYear = true;
		} else if (qName.equals("month")) {
			bMonth = true;
		} else if (qName.equals("day")) {
			bDay = true;
		} 
		data = new StringBuilder();
	}

	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		if (bAuthor) {
			vr.setAuthor(data.toString());
			bAuthor = false;
		} else if (bAbout) {
			vr.setAbout(data.toString());
			bAbout = false;
		} else if (bYear) {
			dateStr.append(data.toString()); 
			bYear = false;
		} else if (bMonth) {
			dateStr.append(data.toString()); 
			bMonth = false;
		} else if (bDay) {
			dateStr.append(data.toString()); 
			bDay = false;
		} else if (bDate) {
			vr.setDate(dateStr.toString());
			bDate = false;
		}
	}

	@Override
	public void characters(char ch[], int start, int length) throws SAXException {
		data.append(new String(ch, start, length));
	}
	
	public VirusReport getVirusReport() {
		return vr;
	}
}


package lab.ssafy.corona.app;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXException;

import lab.ssafy.corona.xml.VirusReport;
import lab.ssafy.corona.xml.VirusReportSaxHandler;


public class VirusReportSaxTest {

	public static void main(String[] args) {

		File file = new File("./src/lab/ssafy/corona/xml/virus-report.xml");
		SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
		
		try {
			SAXParser saxParser = saxParserFactory.newSAXParser();
			VirusReportSaxHandler handler = new VirusReportSaxHandler();
			saxParser.parse(file, handler);

			VirusReport vr = handler.getVirusReport();
			System.out.println(vr);

		} catch (ParserConfigurationException | SAXException | IOException e) {
			e.printStackTrace();
		}
	}
}
