package com.ssafy;

import java.util.Arrays;
import java.util.Scanner;

/*
 
LIS : 원소가 n개인 배열의 일부 원소를 골라내서 부분 수열을 만들었을 떄
각각의 원소는 이전 원소보다 더 크다는 조건을 만족하 길이가 최대인 부분수열.

LIS[n]:전체 수열의 n번째 값까지 고려했을 때 만들어지는 최장 수열의 길이.
 */
public class DP_ListTest {
	/*
	 static String src = "6\r\n"+ "3 2 6 4 5 1"
	 */
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();	//수열의 길이
		int [] arr = new int[N];//원소들 저장, 수열의 값
		int[] LIS = new int[N]; //각 원소를 마지막에 세웠을 때의 최장길이
		
		for(int i =0; i<N;i++) {
			arr[i] = sc.nextInt();
		}
		
		
		for(int k =0; k<N; k++) {
			LIS[k] =1;	//자신만으로 구성되는 lis;
			for(int i =0 ;i<k; i++) {
				if(arr[i]<arr[k])
					LIS[k] = Math.max(LIS[k], LIS[i]+1);
			}
		}
		
		System.out.println(Arrays.toString(LIS));
		
//		Arrays.fill(LIS, 1);
//		int max=0; //하나씩 값 돌때마다 max 갱신하게
//		for(int i =0; i<N; i++) {
//			LIS[i]=1;//어차피 반복 돌리니까 그냥 안에서 직접 돌리자.
//			//자기 혼자 세웠을 떄의 길이로 초기화(자신만으로 구성되는 lis)
//			for(int j =0; j<=i-1;j++) {	//맨 앞부터 자신의 직전의 원소들과 비교
//				if(arr[j]<arr[i] && LIS[i]<LIS[j]+1) {
//					LIS[i] = LIS[j]+1;	//i번째에 값을 넣는거. 원래 lis에 i번째
//				}
//			}
//			if(max<LIS[i]) max = LIS[i];
//		}
//		System.out.println(max);
		/* 4 1 4 3 2*/
//		N2을 NlogN으로 바꾸기만 해도 대박.
//		N이 10만이면 N2은 100억 
//		NlogN은 10만에 대한 log10만
	}
}
